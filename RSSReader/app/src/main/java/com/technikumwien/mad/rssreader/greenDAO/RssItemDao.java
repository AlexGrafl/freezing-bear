package com.technikumwien.mad.rssreader.greenDAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.technikumwien.mad.rssreader.rssutils.RssFeed;
import com.technikumwien.mad.rssreader.rssutils.RssItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table ORDERS.
 */
public class RssItemDao extends AbstractDao<RssItem, Long> {

    public static final String TABLENAME = "RSSITEMS";


    public static class Properties {
        //TODO: private RssFeed feed; needed?


        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property title = new Property(1,String.class,"title",false,"TITLE");
        public final static Property link = new Property(2,String.class,"link",false,"LINK");
        public final static Property pubDate = new Property(3,String.class,"pubDate",false,"PUBDATE");
        public final static Property description = new Property(4,String.class,"description",false,"DESCRIPTION");
        public final static Property content = new Property(5,String.class,"content",false,"CONTENT");
        public final static Property guid = new Property(6,String.class,"guid",false,"GUID");
        public final static Property rssFeedId = new Property(7, long.class, "rssFeedId", false, "RSSFEED_ID");
        public final static Property read = new Property(8, boolean.class, "read", false, "READ");
        public final static Property starred = new Property(9, boolean.class, "starred", false, "STARRED");

    };

    private DaoSession daoSession;

    private Query<RssItem> rssFeeds_RssItemsQuery;

    public RssItemDao(DaoConfig config) {
        super(config);
    }

    public RssItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    //TODO: change query attributes and use TABLENAME
    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RSSITEMS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT," + // 0: id    //AUTO_INCREMENT
                "'TITLE' TEXT NOT NULL ," + // 1: title   >NOT NULL
                "'LINK' TEXT NOT NULL, " + // 2: link
                "'PUBDATE' INTEGER, " + // 3: pubDate
                "'DESCRIPTION' TEXT, " + // 4: description
                "'CONTENT' TEXT, " + // 5: content
                "'GUID' TEXT UNIQUE, " + //6: usid
                "'RSSFEED_ID' INTEGER NOT NULL, " + // 7: RssFeedId
                "'READ' INTEGER," + // 8: Read
                "'STARRED' INTEGER);"); // 9: Starred
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RSSITEMS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RssItem entity) {
        stmt.clearBindings();

        stmt.bindString(2 ,entity.getTitle());
        stmt.bindString(3, entity.getLink());

        java.util.Date date = entity.getPubDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
        stmt.bindString(5, entity.getDescription() == null ? "" : entity.getDescription());
        stmt.bindString(6, entity.getContent() == null ? "" : entity.getContent());
        stmt.bindString(7, entity.getGuid());
        stmt.bindLong(8, entity.getRssFeedId());
        stmt.bindLong(9, entity.isRead()? 1 : 0);
        stmt.bindLong(10, entity.isStarred() ? 1 : 0);
    }

    @Override
    protected void attachEntity(RssItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public RssItem readEntity(Cursor cursor, int offset) {
        RssItem entity = new RssItem(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString((offset + 1)), // title
                cursor.isNull(offset + 2) ? null : cursor.getString((offset + 2)), // link
                cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
                cursor.getString((offset + 4)), // description
                cursor.getString((offset + 5)), // content
                cursor.getString((offset + 6)), // usid
                cursor.getLong(offset + 7), // rssFeedId
                cursor.getInt(offset + 8) == 1, // read (boolean)
                cursor.getInt(offset + 9) == 1 // starred (boolean)
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RssItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLink(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPubDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDescription(cursor.getString(offset + 4));
        entity.setContent(cursor.getString(offset + 5));
        entity.setUsid(cursor.getString(offset + 6));
        entity.setRssFeed__resolvedKey(cursor.getLong(offset + 7));
        entity.setRead(cursor.getInt(offset + 8) == 1);
        entity.setStarred(cursor.getInt(offset + 9) == 1);

    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RssItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(RssItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /** Internal query to resolve the "orders" to-many relationship of Customer. */
    public ArrayList<RssItem> _queryRssFeed_Orders(long rssFeedId) {
        synchronized (this) {
            if (rssFeeds_RssItemsQuery == null) {
                QueryBuilder<RssItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.rssFeedId.eq(null));
                queryBuilder.orderRaw("PUBDATE ASC");
                rssFeeds_RssItemsQuery = queryBuilder.build();
            }
        }
        Query<RssItem> query = rssFeeds_RssItemsQuery.forCurrentThread();
        query.setParameter(0, rssFeedId);
        return (ArrayList) query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRssItemDao().getAllColumns());
            builder.append(" FROM RSSITEMS T");
            builder.append(" LEFT JOIN RSSFEED T0 ON T.'RSSFEED_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected RssItem loadCurrentDeep(Cursor cursor, boolean lock) {
        RssItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RssFeed rssFeed = loadCurrentOther(daoSession.getRssFeedDao(), cursor, offset);
        if(rssFeed != null) {
            entity.setFeed(rssFeed);
        }
        return entity;
    }

    public RssItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RssItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RssItem> list = new ArrayList<RssItem>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<RssItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }


    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RssItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

}